name: Terraform Plan and Apply

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
      working-dir:
        required: true
        type: string
      terraform-version:
        required: false
        type: string
        default: "1.4.5"
      backend-storage-name:
        required: true
        type: string
      backend-container-name:
        required: true
        type: string
      backend-state-key:
        required: true
        type: string
      variables-file:
        required: true
        type: string
      environment:
        required: false
        type: string
      secret-vars:
        required: false
        type: string
    secrets:
      storage-access-key:
        required: true
      azure-client-id:
        required: true
      azure-client-secret:
        required: true
      azure-subscription-id:
        required: true
      azure-tenant-id:
        required: true
      infracost-api-key:
        required: true
      github-token:
        required: true

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get using system modules
        uses: using-system/devops/github/actions/tf-get-usingsystem-modules@main
        with:
          tf-project-directory: ${{ inputs.working-dir }}

      - name: Terrascan
        uses: using-system/devops/github/actions/terrascan@main
        with:
          working-directory: ${{ inputs.working-dir }}
          scan-type: "terraform"
          severity: "MEDIUM"
          skip-rules: "accurics.azure.NS.161"

      - name: Terraform Fmt
        run: terraform fmt -recursive -check
        working-directory: ${{ inputs.working-dir }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: false
        env:
          ARM_CLIENT_ID: ${{ secrets.azure-client-id  }}
          ARM_CLIENT_SECRET: ${{ secrets.azure-client-secret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.azure-subscription-id }}
          ARM_TENANT_ID: ${{ secrets.azure-tenant-id }}

      - name: Terraform Init
        run: terraform init -backend-config="access_key=${{ secrets.storage-access-key }}" -backend-config="storage_account_name=${{ inputs.backend-storage-name }}" -backend-config="container_name=${{ inputs.backend-container-name }}" -backend-config="key=${{ inputs.backend-state-key }}"
        working-directory: ${{ inputs.working-dir }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ inputs.working-dir }}

  getplan:
    needs: analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get using system modules
        uses: using-system/devops/github/actions/tf-get-usingsystem-modules@main
        with:
          tf-project-directory: ${{ inputs.working-dir }}

      - name: Azure Login
        run: |
          az login --service-principal -u ${{ secrets.azure-client-id }} -p ${{ secrets.azure-client-secret }} --tenant ${{ secrets.azure-tenant-id }}
          az account set --subscription="${{ secrets.azure-subscription-id }}"

      - name: Set secret environment variables
        run: |
          for secret_var in $(echo $SECRET_VARS | tr "," "\n"); do
            var=`echo $secret_var | tr '[:lower:]' '[:upper:]'`
            echo "Setting $var"
            value=`jq -r ".${var}" <<< $SECRETS`
            echo "TF_VAR_${var}=${value}" >> $GITHUB_ENV
          done
        env:
          SECRET_VARS: ${{  inputs.secret-vars }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: false
        env:
          ARM_CLIENT_ID: ${{ secrets.azure-client-id  }}
          ARM_CLIENT_SECRET: ${{ secrets.azure-client-secret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.azure-subscription-id }}
          ARM_TENANT_ID: ${{ secrets.azure-tenant-id }}

      - name: Terraform Init
        run: terraform init -backend-config="access_key=${{ secrets.storage-access-key }}" -backend-config="storage_account_name=${{ inputs.backend-storage-name }}" -backend-config="container_name=${{ inputs.backend-container-name }}" -backend-config="key=${{ inputs.backend-state-key }}"
        working-directory: ${{ inputs.working-dir }}

      - name: Terraform Plan
        id: get_plan
        run: |
          set +e
          terraform plan -input=false -out=tfplan -var-file='${{ inputs.variables-file }}' -detailed-exitcode
          exit_code=$?
          terraform show tfplan -no-color > plan.txt
          plan_output=$(jq -Rs . < ./plan.txt)
          printf "terraform_exit_code=$exit_code"
          if [ "$exit_code" -eq "0" ]; then
            echo "changes=false" >> "$GITHUB_OUTPUT"
            echo "plan=$plan_output" >> "$GITHUB_OUTPUT"
            exit 0
          elif [ "$exit_code" -eq "2" ]; then
            echo "changes=true" >> "$GITHUB_OUTPUT"
            echo "plan=$plan_output" >> "$GITHUB_OUTPUT"
            exit 0
          else
            exit 1
          fi
        working-directory: ${{ inputs.working-dir }}

      - name: Get Json plan
        run: terraform show -json tfplan > plan.json
        working-directory: ${{ inputs.working-dir }}

      - name: Comment plan on the issue
        uses: using-system/devops/github/actions/gh-comment-current-issue@main
        with:
          title: Plan for  ${{ inputs.project-name }}
          body: ${{ steps.get_plan.outputs.plan }}
          github-token: ${{ secrets.github-token }}

      - name: Upload tfplan as artifact
        uses: actions/upload-artifact@v3
        with:
          name: "tfplan-${{ inputs.environment }}"
          path: |
            ${{ inputs.working-dir }}/tfplan
            ${{ inputs.working-dir }}/plan.json
    outputs:
      changes: ${{ steps.get_plan.outputs.changes }}

  infracost:
    needs: getplan
    runs-on: ubuntu-latest

    steps:
      - name: Download tfplan artifact
        uses: actions/download-artifact@v3
        with:
          name: "tfplan-${{ inputs.environment }}"
          path: ${{ inputs.working-dir }}

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.infracost-api-key }}
          currency: "EUR"

      - name: Generate Infracost breakdown
        id: infracost
        run: |
          infracost breakdown --path plan.json --project-name ${{ inputs.project-name }} --format json > infracost.json
          infracost output --path infracost.json --format table
        working-directory: ${{ inputs.working-dir }}

      - name: Generate Infracost pr comment
        if: github.event_name == 'pull_request'
        run: |
          infracost comment github --path infracost.json --github-token ${{ secrets.github-token }}  --repo ${{ github.repository }} --pull-request ${{github.event.pull_request.number}} --behavior=delete-and-new
        working-directory: ${{ inputs.working-dir }}

  apply-plan:
    needs: [infracost, getplan]
    if: needs.getplan.outputs.changes == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get using system modules
        uses: using-system/devops/github/actions/tf-get-usingsystem-modules@main
        with:
          tf-project-directory: ${{ inputs.working-dir }}

      - name: Azure Login
        run: |
          az login --service-principal -u ${{ secrets.azure-client-id }} -p ${{ secrets.azure-client-secret }} --tenant ${{ secrets.azure-tenant-id }}
          az account set --subscription="${{ secrets.azure-subscription-id }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
        env:
          ARM_CLIENT_ID: ${{ secrets.azure-client-id  }}
          ARM_CLIENT_SECRET: ${{ secrets.azure-client-secret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.azure-subscription-id }}
          ARM_TENANT_ID: ${{ secrets.azure-tenant-id }}

      - name: Terraform Init
        run: terraform init -backend-config="access_key=${{ secrets.storage-access-key }}" -backend-config="storage_account_name=${{ inputs.backend-storage-name }}" -backend-config="container_name=${{ inputs.backend-container-name }}" -backend-config="key=${{ inputs.backend-state-key }}"
        working-directory: ${{ inputs.working-dir }}

      - name: Download tfplan artifact
        uses: actions/download-artifact@v3
        with:
          name: "tfplan-${{ inputs.environment }}"
          path: ${{ inputs.working-dir }}

      - name: Terraform Apply
        run: terraform apply 'tfplan'
        working-directory: ${{ inputs.working-dir }}
